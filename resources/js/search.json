[[{"l":"Introduction"},{"i":"bienvenue-dans-la-documentation-technique-de-lapplication-web","l":"Bienvenue dans la documentation technique de l'application web","p":["Cette documentation est destinée aux développeurs qui vont travailler sur l'application web. Il est important de comprendre les concepts de base et les technologies utilisées pour pouvoir travailler efficacement sur le code.","L'application web permet de créer des actions pour plusieurs services. Elle utilise les technologies suivantes :","Framework front-end: Vue.js","Préprocesseur CSS: SASS","Style Guide: BEM","Gestionnaire de paquets npm: npm","ESLint pour la convention de code JavaScript","Avant de commencer, veuillez vous assurer que vous avez installé les outils nécessaires pour développer sur l'application. Vous pouvez trouver la liste des outils requis dans le fichier package.json.","Le code source est disponible sur un dépôt Git. Veuillez suivre les processus de contrôle de version définis lorsque vous travaillez sur le code.","Nous espérons que cette documentation vous aidera à vous familiariser avec l'application et à vous lancer dans le développement. N'hésitez pas à nous contacter si vous avez des questions ou des préoccupations."]},{"l":"Pour Commencer","p":["Pour démarrer avec le code source de l'application, suivez les étapes ci-dessous.","Avoir installé Git","Avoir installé Node.js","Notez qu'il n'y a pas besoin d'utiliser l'option --shamefully-hoist ici car les dépendances sont définies à true par défaut dans le fichier .npmrc.","Vous pouvez maintenant ouvrir l'application dans votre navigateur à l'adresse http://localhost:3000, à moins que vous ne modifiiez le port par défaut.","Vous pouvez accéder à la documentation en direct à l'adresse https://hugorcd.github.io/nuxtjs-boilerplate/."]},{"l":"Installation des dépendances","p":["Se placer dans le répertoire du projet avec la commande cd helpr-webapp","Lancer la commande npm install ou pnpm install pour installer toutes les dépendances nécessaires"]},{"l":"Configuration de la base de données","p":["Configurer les paramètres de connexion à la base de données dans le fichier server/database/schema.prisma","Lancer la commande pnpm run prisma:generate pour générer les schémas de données nécessaires","Lancer la commande pnpm run prisma:pull pour récupérer les données sur la base de données","Lancer la commande pnpm run prisma:migrate dev pour migrer les modifications sur la base de données"]},{"l":"Lancer le serveur de développement","p":["Lancer la commande pnpm run dev pour lancer le serveur de développement","Ouvrir un navigateur web et accéder à l'adresse http://localhost:3000 pour accéder à l'application"]},{"l":"Lancer les tests","p":["Il n'y a pas de commande définie pour les tests dans le fichier package.json. Il faudra donc les écrire manuellement."]},{"i":"construire-lapplication-pour-la-production","l":"Construire l'application pour la production","p":["Lancer la commande pnpm run build pour construire l'application pour la production","Lancer la commande pnpm run start pour démarrer le serveur de production"]},{"l":"Formater le code","p":["Lancer la commande pnpm run format pour formater le code selon les conventions définies dans prettier"]},{"l":"Technologies utilisées","p":["Nuxt.js - Le framework JavaScript progressif","Prisma - Alternative open-source à Firebase pour la gestion de bases de données","pnpm - Gestionnaire de paquets rapide et efficient en termes d'espace disque","TypeScript - Langage de programmation typé pour JavaScript","ESLint - Outil de linting pour JavaScript et TypeScript"]}],[{"l":"Guide utilisateur"}],[{"l":"Composants"},{"l":"Listes des composants","p":["CommandConsole.vue","EnvChecker.vue","LanguageSelector.vue","Loader.vue","Navbar.vue","PlanPricing.vue","ProfilTool.vue","Sidebar.vue","ThemeSwitcher.client.vue","Tools.vue","UsersTable.vue"]},{"l":"Comment créer un composant","p":["Pour créer un nouveau composant dans notre application, vous pouvez suivre les étapes suivantes :","Dans le dossier src/components, créez un nouveau fichier .vue pour votre composant","Dans le fichier .vue, définissez la structure HTML pour votre composant à l'aide des balises template","Définissez les styles CSS pour votre composant à l'aide de la section style","Définissez le comportement de votre composant à l'aide de la section script","Importer votre nouveau composant dans les pages où vous souhaitez l'utiliser en ajoutant l'instruction import et en l'intégrant dans le template à l'aide de la balise component.","Exemple :"]}],[{"l":"Design"}],[{"l":"Design System"},{"l":"Introduction","p":["Dans cette section, vous pouvez introduire le design système et expliquer son objectif et son but.","Présentez les couleurs utilisées dans votre design système, avec des captures d'écran ou des codes de couleur.","Décrivez comment les couleurs sont utilisées dans différents contextes (par exemple, le texte, les arrière-plans, les boutons, etc.).","Présentez les polices utilisées dans votre design système, avec des captures d'écran ou des codes de police.","Décrivez comment les polices sont utilisées dans différents contextes (par exemple, les titres, le corps du texte, les boutons, etc.).","Présentez les éléments d'interface utilisateur tels que les boutons, les formulaires, les icônes, etc.","Incluez des captures d'écran ou des images de chaque élément d'interface utilisateur, ainsi que des informations sur comment les utiliser.","Présentez les modèles de page les plus couramment utilisés dans votre application, tels que les pages de connexion, les pages de profil, etc.","Incluez des captures d'écran ou des images de chaque modèle de page, ainsi que des informations sur comment les utiliser."]}],[{"l":"Design visuel"}],[{"l":"Guidelines de développement","p":["Corriger les erreurs et les bugs immédiatement après les avoir détectés.","Écrire des tests pour vérifier le bon fonctionnement des composants, des fonctions, des algorithmes, etc.","Effectuer une validation des entrées pour éviter les erreurs et les violations de sécurité.","Éviter les abréviations et les acronymes dans les noms, sauf s'ils sont largement reconnus et utilisés, tels que HTML ou CSS.","Éviter les codes redondants et les duplicatas. Utiliser les variables pour les valeurs répétées et les fonctions pour les blocs de code répétitifs.","Éviter les fonctions ou les blocs de code longs et complexes. Si nécessaire, les découper en sous-fonctions ou sous-blocs pour une meilleure lisibilité.","Éviter les noms de variables ou de fonctions identiques dans des fichiers différents.","Éviter les sélecteurs descendants profonds (comme ul li a) et préférer les classes pour les styles spécifiques.","Éviter les styles globaux qui peuvent affecter d'autres éléments sur la page.","Exécuter les tests régulièrement pour détecter les erreurs et les bugs.","Il est important de noter que la configuration ESLint peut être modifiée si nécessaire pour s'adapter aux besoins du projet. Toute modification doit être approuvée par au moins un membre du personnel en charge du développement avant d'être apportée.","Les noms de composants doivent être en PascalCase, tels que Navbar.vue ou ProfileTool.vue.","Les noms de styles doivent être en kebab-case, tels que font-size ou background-color.","Les noms de variables et de fonctions doivent être en camelCase, tels que selectedOption ou calculateTotal.","Maintenir une couverture de test adéquate pour garantir la qualité du code.","Notre projet utilise ESLint pour maintenir une convention de code cohérente et de haute qualité. Tous les développeurs sont encouragés à respecter les règles définies par la configuration ESLint.","Pour s'assurer que le code respecte les règles, veuillez exécuter npm run lint avant de faire une demande de fusion. Si des erreurs sont détectées, corrigez-les avant de continuer.","Suivre la structure de code standard pour chaque fichier.","Suivre les conventions de style de la communauté pour les styles CSS et HTML.","Utiliser des classes CSS pour les styles plutôt que d'utiliser des styles inline dans les éléments HTML.","Utiliser des commentaires pour documenter le code et expliquer les blocs de code importants.","Utiliser des noms descriptifs et significatifs pour les composants, les variables, les fonctions, les styles, etc.","Utiliser des variables pour les couleurs, les tailles de police, etc. pour une meilleure maintenabilité."]}],[{"l":"Stockage de données"}],[{"l":"Ressources Supplémentaires"},{"i":"documentation-de-lapi","l":"Documentation de l'API","p":["Cette page de documentation fournit un lien vers la documentation complète de l'API utilisée dans notre application."]},{"i":"lien-vers-la-documentation-de-lapi","l":"Lien vers la documentation de l'API","p":["Cette documentation fournit toutes les informations nécessaires pour interagir avec l'API, y compris les URL d'endpoints, les méthodes HTTP autorisées, les paramètres requis et les réponses attendues. Les développeurs peuvent également trouver des exemples de code et des guides sur la façon d'utiliser l'API dans leur propre application."]}]]