generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailVerification {
  token     String   @unique
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPassword {
  token     String   @unique
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            Int     @id @default(autoincrement())
  name          String
  userId        Int
  stripeId      String  @unique
  stripeStatus  String?
  stripePriceId String?
  trialEndsAt   Int?
  endsAt        Int?
  startDate     Int
  lastEventDate Int
  User          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  loginType           String?               @default("email")
  username            String                @unique
  email               String                @unique
  firstname           String
  lastname            String
  password            String
  stripeCustomerId    String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  role                Int                   @default(1)
  isVerified          Boolean               @default(false)
  refreshToken        String?               @unique
  authToken           String?               @unique
  id                  Int                   @id @default(autoincrement())
  avatar              String                @default("https://storage.cloud.google.com/helpr/default-avatar.jpeg")
  providerId          Int?
  EmailVerification   EmailVerification[]
  Flow                Flow[]
  ProviderCredentials ProviderCredentials[]
  ResetPassword       ResetPassword[]
  Subscription        Subscription[]
  Provider            Provider[]
}

model ProviderCredentials {
  id          Int    @id @default(autoincrement())
  providerId  String @unique
  provider    String
  accessToken String
  userId      Int
  expiresAt   Int?
  User        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Action {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  endpoint    String
  name        String
  providerId  Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  Provider    Provider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  FlowActions FlowActions[]
}

model Flow {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  accessToken String
  enabled     Boolean       @default(true)
  status      Int           @default(1)
  trigger     Int           @default(1)
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  FlowActions FlowActions[]
}

model FlowActions {
  id        Int       @id @default(autoincrement())
  flowId    Int
  actionId  Int
  payload   String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  Action    Action    @relation(fields: [actionId], references: [id], onDelete: Cascade)
  Flow      Flow      @relation(fields: [flowId], references: [id], onDelete: Cascade)
}

model Provider {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  logo        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  Action      Action[]
  User        User[]
}
